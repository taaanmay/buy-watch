"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const universal_fetch_1 = require("@inrupt/universal-fetch");
class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.login = async (sessionId, options, eventEmitter) => {
            var _a, _b;
            await this.sessionInfoManager.register(sessionId);
            if (typeof options.redirectUrl === "string" &&
                !(0, solid_client_authn_core_1.isValidRedirectUrl)(options.redirectUrl)) {
                throw new Error(`${options.redirectUrl} is not a valid redirect URL, it is either a malformed IRI or it includes a hash fragment.`);
            }
            const loginReturn = await this.loginHandler.handle({
                sessionId,
                oidcIssuer: options.oidcIssuer,
                redirectUrl: options.redirectUrl,
                clientId: options.clientId,
                clientSecret: options.clientSecret,
                clientName: (_a = options.clientName) !== null && _a !== void 0 ? _a : options.clientId,
                refreshToken: options.refreshToken,
                handleRedirect: options.handleRedirect,
                tokenType: (_b = options.tokenType) !== null && _b !== void 0 ? _b : "DPoP",
                eventEmitter,
            });
            if (loginReturn !== undefined) {
                this.fetch = loginReturn.fetch;
                return loginReturn;
            }
            return undefined;
        };
        this.fetch = universal_fetch_1.fetch;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = universal_fetch_1.fetch;
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getSessionIdAll = async () => {
            return this.sessionInfoManager.getRegisteredSessionIdAll();
        };
        this.registerSession = async (sessionId) => {
            return this.sessionInfoManager.register(sessionId);
        };
        this.clearSessionAll = async () => {
            return this.sessionInfoManager.clearAll();
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.handleIncomingRedirect = async (url, eventEmitter) => {
            const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);
            this.fetch = redirectInfo.fetch;
            return {
                isLoggedIn: redirectInfo.isLoggedIn,
                webId: redirectInfo.webId,
                sessionId: redirectInfo.sessionId,
            };
        };
    }
}
exports.default = ClientAuthentication;
//# sourceMappingURL=ClientAuthentication.js.map