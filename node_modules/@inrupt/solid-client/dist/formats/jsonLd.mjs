import { JsonLdParser } from 'jsonld-streaming-parser';
import { FetchDocumentLoader } from 'jsonld-context-parser';
import { getSourceUrl } from '../resource/resource.mjs';
import { fetch } from '../fetcher.mjs';

//
/**
 * ```{note} This function is still experimental and subject to change, even
 * in a non-major release.
 * ```
 * This returns a parser that transforms a JSON-LD string into a set of RDFJS quads.
 *
 * @returns A Parser object.
 * @since 1.15.0
 */
const getJsonLdParser = () => {
    const onQuadCallbacks = [];
    const onCompleteCallbacks = [];
    const onErrorCallbacks = [];
    return {
        onQuad: (callback) => {
            onQuadCallbacks.push(callback);
        },
        onError: (callback) => {
            onErrorCallbacks.push(callback);
        },
        onComplete: (callback) => {
            onCompleteCallbacks.push(callback);
        },
        // The following returns a Promise that can be awaited, which is undocumented
        // behavior that doesn't match the type signature. It prevents a potentially
        // breaking change, and will be updated on the next major release.
        parse: async (source, resourceInfo) => new Promise((res) => {
            const parser = new JsonLdParser({
                baseIRI: getSourceUrl(resourceInfo),
                documentLoader: new FetchDocumentLoader(fetch),
            });
            let endCalled = false;
            function end() {
                if (!endCalled) {
                    endCalled = true;
                    onCompleteCallbacks.forEach((callback) => callback());
                    res();
                }
            }
            parser.on("end", end);
            parser.on("error", (err) => {
                onErrorCallbacks.forEach((callback) => callback(err));
                end();
            });
            onQuadCallbacks.forEach((callback) => parser.on("data", callback));
            parser.write(source);
            parser.end();
        }),
    };
};

export { getJsonLdParser };
