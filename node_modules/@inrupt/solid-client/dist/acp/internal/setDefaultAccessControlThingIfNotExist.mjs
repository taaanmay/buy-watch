import 'jsonld-streaming-parser';
import 'jsonld-context-parser';
import { getSourceUrl } from '../../resource/resource.mjs';
import '../../fetcher.mjs';
import 'n3';
import '@rdfjs/data-model';
import '../../rdf.internal.mjs';
import '../../rdfjs.mjs';
import 'http-link-header';
import { createThing } from '../../thing/thing.mjs';
import { getIriAll } from '../../thing/get.mjs';
import '@inrupt/universal-fetch';
import { buildThing } from '../../thing/build.mjs';
import { internal_getAcr } from '../control.internal.mjs';
import { ACP } from '../constants.mjs';
import { getAccessControlResourceThing } from './getAccessControlResourceThing.mjs';
import { getDefaultAccessControlUrl } from './getDefaultAccessControlUrl.mjs';
import { setAccessControlResourceThing } from './setAccessControlResourceThing.mjs';
import 'uuid';

//
function getAccessControlTypeFromDefaultAccessControlName(name) {
    if (name.includes("Member")) {
        return ACP.memberAccessControl;
    }
    return ACP.accessControl;
}
/** @hidden */
function setDefaultAccessControlThingIfNotExist(resource, name) {
    const defaultAccessControlThingUrl = getDefaultAccessControlUrl(resource, name);
    const acr = internal_getAcr(resource);
    // Get the Access Control Resource Thing or create it
    let accessControlResourceThing = getAccessControlResourceThing(resource);
    if (accessControlResourceThing === null ||
        typeof accessControlResourceThing === "undefined") {
        accessControlResourceThing = createThing({ url: getSourceUrl(acr) });
    }
    // Get the Default Access Control Thing or create it and return
    const accessControlUrlAll = getIriAll(accessControlResourceThing, getAccessControlTypeFromDefaultAccessControlName(name));
    if (!accessControlUrlAll.includes(defaultAccessControlThingUrl)) {
        accessControlResourceThing = buildThing(accessControlResourceThing)
            .addUrl(getAccessControlTypeFromDefaultAccessControlName(name), defaultAccessControlThingUrl)
            .build();
        return setAccessControlResourceThing(resource, accessControlResourceThing);
    }
    // Return the original resource if the ACR and Default AC exist
    return resource;
}

export { setDefaultAccessControlThingIfNotExist };
