import { ErrorEvent } from "isomorphic-ws";
import { NotificationOptions, statuses } from "./interfaces";
import { LiveNotification } from "./liveNotification";
export { ErrorEvent } from "isomorphic-ws";
export declare interface WebsocketNotification {
    /**
     * Emitted when the connection is established
     */
    on(event: "connected", listener: () => void): this;
    /**
     * Emitted when the next connection is established
     */
    once(event: "connected", listener: () => void): this;
    /**
     * Removes a listener for the "connected" event
     */
    off(event: "connected", listener: () => void): this;
    /**
     * Emitted when the connection is closed
     */
    on(event: "closed", listener: () => void): this;
    /**
     * Emitted when the next connection is closed
     */
    once(event: "closed", listener: () => void): this;
    /**
     * Removes a listener for the "closed" event
     */
    off(event: "closed", listener: () => void): this;
    /**
     * Emitted when a valid notification is received, the payload is a
     * [activitystreams
     * Activity](https://www.w3.org/TR/activitystreams-vocabulary/#dfn-activity).
     */
    on(event: "message", listener: (notification: object) => void): this;
    /**
     * Emitted when the next valid notification is received, the payload is a
     * [activitystreams
     * Activity](https://www.w3.org/TR/activitystreams-vocabulary/#dfn-activity).
     */
    once(event: "message", listener: (notification: object) => void): this;
    /**
     * Removes a listener for the "message" event
     */
    off(event: "message", listener: (notification: object) => void): this;
    /**
     * Emitted when an error is encountered on the WebSocket
     */
    on(event: "error", listener: (error: ErrorEvent) => void): this;
    /**
     * Emitted when the next error is encountered on the WebSocket
     */
    once(event: "error", listener: (error: ErrorEvent) => void): this;
    /**
     * Removes a listener for the "error" event
     */
    off(event: "error", listener: (error: ErrorEvent) => void): this;
}
/**
 * Constructor for a WebSocket Notification instance, which allows subscribing to resources in the solid ecosystem.
 * See the [Solid Notifications Protocol Specification](https://solid.github.io/notifications/protocol) for more details.
 *
 * ```typescript
 * import { getDefaultSession } from '@inrupt/solid-authn-browser';
 * // or for node.js:
 * //   import { Session } from '@inrupt/solid-authn-node';
 *
 * const session = getDefaultSession();
 * // for node.js:
 * //   const session = new Session();
 * //   await session.login({
 * //     oidcIssuer,
 * //     clientId,
 * //     clientSecret,
 * //   });
 *
 * const socket = new WebsocketNotification(parentContainerUrl, {
 *   fetch: session.fetch,
 * });
 *
 * socket.on("message", (notification) => {
 *   console.log("Change:", notification);
 * });
 *
 * // Connect for receiving notifications:
 * await socket.connect();
 *
 * // later:
 * socket.disconnect();
 * ```
 */
export declare class WebsocketNotification extends LiveNotification {
    /** @hidden */
    status: statuses;
    constructor(topic: string, options?: NotificationOptions);
    /**
     * Connects the websocket to start receiving notifications. If no
     * `providedEndpoint` or `providedSubprotocol` parameter is present, then
     * those will automatically be discovered based on the capabilities of the
     * host of the resource that you're subscribing to notifications for.
     */
    connect: (providedEndpoint?: string, providedSubprotocol?: string) => Promise<void>;
    disconnect: () => void;
}
