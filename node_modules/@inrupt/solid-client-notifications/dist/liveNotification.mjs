import { EventEmitter } from 'events';
import { NotImplementedError } from './errors.mjs';
import { BaseNotification } from './notification.mjs';

//
/**
 * @hidden
 */
class LiveNotification extends BaseNotification {
    // TODO move constructor options to options instead of arguments
    constructor(topic, protocolList, options) {
        super(topic, protocolList, options);
        this.connect = () => {
            this.status = "closed";
            throw new NotImplementedError();
        };
        this.disconnect = () => {
            this.status = "closed";
            throw new NotImplementedError();
        };
        this.emitter = new EventEmitter();
    }
    /* eslint @typescript-eslint/no-explicit-any: 0 */
    on(eventName, listener) {
        this.emitter.on(eventName, listener);
        return this;
    }
    /* eslint @typescript-eslint/no-explicit-any: 0 */
    once(eventName, listener) {
        this.emitter.once(eventName, listener);
        return this;
    }
    /* eslint @typescript-eslint/no-explicit-any: 0 */
    off(eventName, listener) {
        this.emitter.off(eventName, listener);
        return this;
    }
}

export { LiveNotification };
