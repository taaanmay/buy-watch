/// <reference types="node" />
import { EventEmitter } from "events";
import { BaseNotification } from "./notification";
import { NotificationOptions, protocols } from "./interfaces";
export declare interface LiveNotification {
    on(eventName: string, listener: (...args: any[]) => void): this;
    once(eventName: string, listener: (...args: any[]) => void): this;
    off(eventName: string, listener: (...args: any[]) => void): this;
}
/**
 * @hidden
 */
export declare class LiveNotification extends BaseNotification {
    /** @hidden */
    emitter: EventEmitter;
    constructor(topic: string, protocolList: protocols[], options?: NotificationOptions);
    connect: () => void;
    disconnect: () => void;
}
